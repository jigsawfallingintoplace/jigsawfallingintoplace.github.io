[{"title":"Radiohead和我","url":"/2019/10/19/radiohead-and-i/","content":"\n### 〇\n\n几周前，我看了Thom Yorke（Radiohead 主唱）的live。任何尝试用语言形容那场演出，以及我在那次live中的感觉都是徒劳的，我也不想大费周折写一堆我根本写不了的东西。作为替换，我想记录一下从小到大我的生活中与Radiohead有关的事情。下面文字不涉及任何乐评，不涉及任何有文学价值的东西。\n\n### 一\n\n在我二年级的时候我妈让我校外的英文老师给我一些英文歌听。她的本意是想像那些文章和广告鼓吹的那样“让孩子快乐地学习”英语。过了一周，上课的时候，我的英语老师带来了他的iPod和一个数据线，那是一个很老的iPod，那个时候还可以直接用iTunes从iPod向电脑里导出歌曲。他给了我都有什么歌呢？Radiohead，Beatles，Arcade Fire, Sufjan Stevens, 还有很多别的艺人杂七杂八的歌。\n\n那年是2008或2009年，音乐从实体转变成数字（digital）的最后一个动作，最后一个转过头的对过去的眷恋的眼神，最后一个鞠躬应该发生在那年。也就是说，当时没有网易云，Spotify还没有席卷这个世界，CD仍然在音乐界有分量。我家旁边当时有个卖CD和DVD的店，刚上初中的时候就倒闭了。除了这里的歌，我没有任何可以“主动”地听的歌（我的意思是，麦当劳里放的林俊杰不算）。换句话说，当我产生任何想要听音乐的想法——这些想法也必然是这个文件夹里的歌造成的——的时候，我只能回到那一个源泉，那个水龙头每天一成不变，但是我每次去都能，都能体会到以前从未体会过的感觉。\n\n当时，整个音乐界对我，就只是那一个文件夹的歌。\n\n### 二\n\n我的，从某种意义上，“畸形”的音乐品味就是从这个土壤中养成的，像一棵树，一切都是从那个根中长出，发芽，招摇，沙沙作响的。我仍然记得我第一次听Paranoid Android的那个夜晚，那应该是十年前了：我在客厅的沙发上（小孩个矮，弯一下腿就可以把两条腿都放在沙发的座位上，我当时就是这么坐着的；现在这个沙发已经换了），我妈的笔记本电脑在旁边，我侧身面朝电脑屏幕，一切感官全部被听觉占领，电脑的扬声器放着一个标题是两个我不认识的单词的歌。\n\n我当时觉得这首歌好长，好长，好长啊。就像大海，你感受到了一阵波浪冲击到你的皮肤，你的身体，你的感官，但是下一阵马上又来了。如同这样一层一层没有止境的波浪，一层一层由Thom Yorke的高音的波浪，一层一层Jonny Greenwood吉他riff的波浪。歌曲在中间毫无征兆地爆发，一个外国人在电脑扬声器里吼着我听不懂的话，然后好像（在歌曲的第三“乐章”）波浪平息了，不，不是平息了，是我（终于）被浪击上了海面，是我的脚（终于）离开了地面，是我（终于）顺着浪开始漂浮，阳光透过消散的云抚在我的脸上。\n\n### 三\n\n小学时候我最经常做的一件事就是向别人推荐我喜欢的歌，手舞足蹈，如同在向别的小朋友宣布自己看到的新大陆。但是基本上总是失败的。折腾了很多次，但是最后还是只有我在喜欢我喜欢的东西。这种失败，一次次的失败久而久之堆砌成了一种很奇怪的孤独，没有人喜欢你喜欢的东西。这种变奏的孤独在内心久而久之就平息，准确来说，不再引起很大的波澜了——就像抹开了一层黄油：它在那里，但你如果不去特别注意，它就不在了。\n\n等流媒体兴起的时候我便也开始用它们听歌，并且开始自己找歌听了（不用再向我的英文老师要新歌了）。我小学时候的同桌——我当时最好最好的哥们——买了本书叫《感动世界的50首歌》，封皮是一个黑人弹吉他，样子很专注。他把这50首歌放到了他的iPod Shuffle里（如果你不知道这是什么，很正常），每次春游秋游的时候，在大巴上我们一人带一个耳机听这些歌，都是些老歌，斯卡波罗集市，昨日重现，月亮河，Casablanca, Tears in Heaven, Say You Say Me, 500 Miles。书里有两首歌我印象最深，一首是《老橡树上的黄丝带》，讲一个刚出狱的小子回老家的故事，大巴穿过00年代末北京郊区的街道，晃晃悠悠，道路两边是北京的杨树，是那种一排排，只有北京有的很高杨树，一排接一排从我眼角的车窗中划过，我和他一块在大巴唱着这首歌。另一首是Smells Like Teen Spirit，因为我到现在也不知道这首歌怎么着就“感动世界”了。\n\n啊呀，这一段和Radiohead什么关系也没有，嘿，哥们，如果你在读这个，你最近怎么样呀。\n\n![third_grade](/img/third_grade.jpg)\n_小学三年级的时候给同学写的同学录。几点说明：1.蓝色多瑙河是当时每天中午校园广播一开始放的音乐，我觉得挺好听的。2.我至今为止仍然特别，特别喜欢脆薯饼（以及Radiohead，和蓝色多nao河）。_\n\n### 四\n\n我中考那年Radiohead发了张新专辑，A Moon Shaped Pool，差不多是在一模左右发的。当时第一次接触到真正的“压力”二字是什么意思。专辑里有一首叫“The Numbers”的歌，里面有一句，别的乐器安静下来，Thom Yorke用他的高音唱到\"One day at a time”，然后配乐又恢复了之前的士气，宛如整个乐队为了让Thom对我说这一句话安静了几个小节。One day at a time，说得多好啊。\n\n高中我碰到了很多很多志同道合的朋友，我至今都很感激他们。有一次下晚自习，一出晚自习教室门就听见有人在弹一楼的钢琴，听了两个小节我辨认出他在弹Radiohead的Pyramid Song。信毅楼的楼道灯已经关了，只有几盏灯还在亮着。出晚自习教室大脑是空的，随着我疲惫地下楼梯，钢琴声音越来越大，灯光仿佛在摇曳，那个特有的节奏型，强音和弱音相互交替，like spirits, coming out from the piano, vaporizing and levitating into the air, into my ears, into every dark and empty classrooms in the building, hidden behind the desks and the textbooks, into the cold night.\n\n高三时感觉到的压力和初三不是一个数量级的，而且越过越觉得每天都越来越相似，趋近于同一天的不同变式，每天都像昨天。有时候大课间D,N,和我会去逸夫楼里面的小礼堂，礼堂里有几把跑音了的吉他，我们一块弹几首一个大课间就过去了（高考后C,D,N和我甚至一块组了个乐队）。一天吃完饭，我们往班里走，N对我说，辰哥，我感觉我现在听Radiohead的歌，我现在能听到Radiohead的歌，我就感觉自己很... 他笑着顿了一下，好像在寻找一个最恰当的词语，傍晚的阳光透过勤肃楼的大窗户和窗外的树斜射进楼道里，晚风和街上的杂音一起从窗户里飘进来，传来凉意，但是我当时只是在等着他把这句话说完，不知道这些风，这些阳光，这些街上驶去的车辆，全世界在那几秒钟都和我一样，也是在等着N把这句话说完，也是在等着N转过头，看着我说出那个我一直想表达，却一直不知道如何表达的词语：\n\n> __“我就感觉自己很幸运。”__\n\n### 五\n\n高考考完那天，在八中考场碰上了一个许久许久没见的很要好的小学同学，她跟我说，你小学时候喜欢Radiohead真是明智。我笑了一下说，为什么这么说。因为我在高中终于喜欢上了Radiohead了，她说，然后她也笑了。\n\n看Thom Yorke前一个礼拜，我给文章开头那个英语老师发微信，说我几天后终于能看到Thom Yorke真人了。之后我们聊了一会，我跟他说，Radiohead最近那张专辑实在是太棒了。他说，Radiohead出专辑了？对啊，我说，2016年就出了，A Moon Shaped Pool，你不知道吗？不知道，哈哈哈，他说，我很久很久没听Radiohead了。他接着对我说这几年他有几段失败的感情经历，然后说现在总听Ariana Grande, Cardi B, Taylor Swift一类的，不想再听Radiohead了。我们沉默了一会，他发了这条消息：\n\n> \"True Love Waits was re-released... Damn it hurts so good\"\n\n_注：True Love Waits之前只有一个2001年在一个live专辑里发行的现场版，在2016年第一次出现在正统的专辑中（A Moon Shaped Pool）。_\n\n我当时想起我在认识那些志同道合的哥们之前的一些心境。有时候我会问自己如果重来我会去选择去喜欢那些所有人都喜欢的东西，于是得以和见到的每一个人都能立刻聊起来吗？于是得以像我的那位英语老师现在这样，在欢快的歌曲中体会三分钟他们构造出来的欢快的世界吗？\n\n在波拉尼奥的《荒野侦探》的第二部分的结尾中，一个老诗人和两个年轻诗人喝着酒聊了一晚上，最后老诗人问年轻诗人：\"Boys, is it worth it? Is it worth it? Is it really worth it?\" 我们不知道老诗人具体在指什么，但无非大意就是Is pursuing literature worth it? Is poetry worth all this struggle? 其中一个喃喃道\"Simonel\".\n\n在四百页前，在书的第一部分中，第一人称主人公在脑海里想了这么一句话：\n\n\"If simón is slang for yes and nel means no, then what does simonel mean?\"\n\n我很久以前也喜欢问自己这个问题，我当时又一次问了自己这个问题。Is it worth it? Is liking all this stuff that nobody likes worth it? Is getting your life attached to the music, the films, the books worth it? 以前的我应该也是一个会回答\"Simonel\"的人，可是当时我想到了N对我说的那句话，“我觉得自己很幸运”，他说完这句话的笑仿佛在尝试用归类于玩笑来减轻这句话所带有的分量，却是徒劳的。\n\n是啊，我们是幸运的。人类存在了那么多年，目前只有一百年能看到任何形式的电影，只有一百年能听到西贝柳斯，只有五十年能听到披头士，只有五十年有平克弗洛伊德。全中国有那么多人，只有那么一些有机会踏出来，看到这些令人叹为观止的山川河流奇峰怪石云卷云舒。全世界有那么多人，只有那么一些曾掂量过这些艺术的分量。\n\n### 六\n\n我的文笔很糟糕，我其实也不知道如何把我想表达的意思说出来，我就用一句我很是喜欢的Leonard Cohen的歌词结束吧：\n\n> \"We're ugly but we have the music.\"\n\n世界上有多少句话都是可以用一个\", but we have the music.\"来结束的啊。我的一个很好的朋友刚才对我说，是音乐艺术和文字让生而为人这件事情变得美丽。The music is there with us, through our lives, so is the books we read and the films we watch, it's there with us no matter what, we're marking them and they're marking us.\n\n\n\n"},{"title":"tuningfork - Pt. 1 - 用Scrapy爬虫得到Pitchfork一切8.0+乐评（Python网页爬虫教程）","url":"/2019/10/12/tuningfork-pt-1/","content":"\n[**目录**](https://jigsawfallingintoplace.github.io/2019/10/06/tuningfork-pt-0/)\n\n[**GitHub**](https://github.com/jigsawfallingintoplace/tuningfork)\n\n目前比较流行的Python爬虫package有两个，一个是[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)，另一个是[Scrapy](https://scrapy.org/)。但是[据说](https://hexfox.com/p/scrapy-vs-beautifulsoup/)Scrapy更方便，更强大，速度更快。本教程将使用Scrapy。\n\n关于如何使用Scrapy，[Scrapy的官方教程](http://docs.scrapy.org/en/latest/index.html)必然讲得比我好。随便百度一下谷歌一下\"Scrapy教程\"应该也讲得比我好hhhh。\n\n## 安装\n\n此处略，直接（在git bash）命令行里输入\n\n```bash\npip install Scrapy\n```\n\n如果你没有Python，那就先搜索一下怎么下载Python，在此不再赘述。\n\n[官方安装教程](http://docs.scrapy.org/en/latest/intro/install.html)\n\n## 介绍\n\n开始正题。希望本教程能够越简洁明了越好。\n\n爬虫总体来说有两个功能：\n1. **Parse 解析** 白话：对于每一篇爬虫会遇到的网页，你得告诉爬虫去摘录哪些部分中的信息。\n2. **Follow Links 跟随链接** 白话： 爬虫每爬完一篇网页，你得告诉它接下来去哪个网址爬信息。不然总不能你一个一个输入网址吧hhhh\n\n一般来说，这两个功能可以放在一个爬虫里，即：这个爬虫先开始爬这个网页，摘完了你要的信息，同时也找到了它接下来要爬的网页（一般来说都是一个类似“next page”或者“previous page”一类的按钮），跟随那个链接（比如说\"next page\")，继续摘你要的信息，直到没有“next page”这样的按钮。\n\n跟随哪个链接都是随意的，不一定非得是next page。比如说你可搞一个百度百科的爬虫，每爬完一篇直接跟随这个词条中任何其他百度百科词条的超链接，以此类推，然后你就能爬出来很多很多百度百科词条。\n\n我怀揣着希望，兴冲冲地想让这么一个爬虫把所有我想要Pitchfork的乐评都爬出来，结果我发现————\n\n***他们并没有这个任何类似\"next review\",\"next page\"这样的按钮***\n\nPitchfork作为高逼格网站，用了ajax的[infinite scroll](https://scrollmagic.io/examples/advanced/infinite_scrolling.html)功能，即，你只要看到这篇乐评的差不多四分之三，网页自动把下一篇乐评无缝衔接在这篇乐评之后。这会造成什么后果呢，爬虫每摘录完一个网页里的信息，它就在脑海里[叹息一声\"Where do we go from here\"](https://music.163.com/#/song?id=18795418)，然后收工了——因为我并不能告诉它接下来去parse哪个网址。\n\n在我不知所措了三天之后，我想到了办法！！！\n\nPitchfork有[一个网页全部是他们曾给分数不低于8.0分的乐评的链接](https://pitchfork.com/best/high-scoring-albums/)，虽然这个网页也是infinite scroll，但是我们发现再往下浏览的时候，每个网址是标号的。\n\n```html\nhttps://pitchfork.com/best/high-scoring-albums/?page=1\nhttps://pitchfork.com/best/high-scoring-albums/?page=2\nhttps://pitchfork.com/best/high-scoring-albums/?page=3\nhttps://pitchfork.com/best/high-scoring-albums/?page=4\n```\n\n如果网址有规律可循，那就（相对）简单了。\n\n### 总体思路\n\n1. 先让爬虫一号得到一切8.0+乐评的网址，存起来。\n2. 再让另一个爬虫跟随这个文件里的网址，分别得到我想要的信息。\n\n直接上代码。\n\n## 爬虫#1\n\n先建立一个爬虫：在命令行中cd到你想要建爬虫的文件夹，然后输入\n\n```bash\nscrapy startproject p4kLinkScraper\n```\n\n在`p4kLinkScraper/spiders`文件夹里建立一个link_scraper.py，把这些输入进去。\n\n\n```python\nimport scrapy\n\nURL = 'https://pitchfork.com/best/high-scoring-albums/?page=%d'\n\nclass linkScraper (scrapy.Spider):\n\tname = \"linkScraper\"\n\t\n\tstart_urls = [URL % 1]\n\n\tdef __init__(self):\n\t\tself.page_number = 1\n\n\tdef parse(self, response):\n\n\t\tif self.page_number >= 386:\n\t\t\traise CloseSpider('no more pages')\n\n\t\tfor review in response.xpath('//div[@class=\"review\"]'):\n\t\t\tyield {\n\t\t\t\t'url' : review.xpath('.//a/@href').get(),\n\t\t\t\t'artist' : review.xpath('.//ul/li/text()').get(),\n\t\t\t\t'album' : review.xpath('.//h2/text()').get()\n\t\t\t}\n\n\t\tself.page_number += 1\n\t\tnewurl = URL % self.page_number\n\t\tyield scrapy.Request(url=newurl, callback=self.parse)\n```\n\n白话：一开始先让它爬https://pitchfork.com/best/high-scoring-albums/?page=1 这篇，parse完了之后，直接把page_number加一，继续爬。\n\n那么在网页里怎么parse呢？先找到HTML中一切css class为“review”的div，然后在这些里面找到相应的网址以及其他信息。在网页里怎么找可以用Chrome的Inspect mode(ctrl shift i)可以找到\n\n![image1](/img/11.png)\n\n让Scrapy爬虫“找到”你想要的信息的方法有两种，第一种是css selectors，第二种是xpath。这里我们用xpath。以上图为例，如果我们想找到本文标题，我们可以直接\n```python\nxpath('//div[@class=\"review\"]')\n```\n这里双斜线（//）是**任何子孙**的意思，单斜线（/）则是严格的这一个节点的孩子。\n仍然以刚才那个图片为例子。我想要找到标题可以\n```python\nxpath('//div[@class=\"post_container\"]/div[@class=\"review\"]')\n或者\nxpath('//div[@class=\"index_container\"]//div[@class=\"review\"]')\n```\n但是不可以\n```\nxpath('//div[@class=\"index_container\"]/div[@class=\"review\"]')\n```\n\n在命令行里cd到project文件夹，让爬虫开始爬，并把结果输入到一个json文件里：\n```\nscrapy crawl quotes -o eightPlusLinks.json\n```\n\n然后我们就有了一大长串8.0+分乐评的链接啦！\n![Honestly I don't like Bon Iver's new album that much](/img/12.png)\n\n## 爬虫#2\n\n之后我们就可以再建立一个爬虫，跟随刚才爬出来的一切8.0+乐评的网址。具体内容参见[我的GitHub](https://github.com/jigsawfallingintoplace/tuningfork/tree/master/pitchfork_scraper)\n\n```python\nimport scrapy\nfrom ..items import PitchforkScraperItem\nfrom pathlib import Path\nimport json\nfrom html_text import extract_text\n# import BNMlinks.json\n\nclass PitchforkSpider (scrapy.Spider):\n\tname = \"pitchfork_spider\"\n\t# start_urls = ['https://pitchfork.com/reviews/albums/the-carters-everything-is-love/']\n\n\tdef start_requests(self):\n\t\turl = 'https://pitchfork.com'\n\t\t###!!!!!!!! CHANGE DIRECTORY !!!!!!!!###\n\t\tpath = Path('C:\\\\Users\\\\drillthewall\\\\Desktop\\\\tuningfork\\\\pitchfork_scraper\\\\pitchfork_scraper\\\\spiders\\\\eightPlusLinks.json')\n\t\twith path.open() as json_file:\n\t\t\tdata = json.load(json_file)\n\t\t\tfor review in data:\n\t\t\t\tappendurl = review['url']\n\t\t\t\ts = url + appendurl\n\t\t\t\tyield scrapy.Request(s,self.parse)\n\n\n\tdef parse(self, response):\n\t\titem = PitchforkScraperItem()\n\t\talbum = response.xpath(\"//h1[@class='single-album-tombstone__review-title']/text()\").get()\n\t\tartist = response.xpath('//ul[@class=\"artist-links artist-list single-album-tombstone__artist-links\"]/li/a/text()').getall()\t\t\n\n\t\tyear = response.xpath('//span[@class=\"single-album-tombstone__meta-year\"]').get()\n\t\tyear = extract_text(year)\n\t\tyear = year[2:]\n\n\t\tgenre = response.xpath('//a[@class=\"genre-list__link\"]/text()').getall()\n\t\treviewer = response.xpath('//a[@class=\"authors-detail__display-name\"]/text()').get()\n\t\tscore = response.xpath(\"//span[@class='score']/text()\").get()\n\n\t\ttext = \"\"\n\t\tfor paragraph in response.xpath(\"//div[@class='contents dropcap']/p\"):\n\t\t\thtml = paragraph.get()\n\t\t\ttext = text + \" \" + extract_text(html)\n\n\t\titalic = response.xpath(\"//em/text()\").getall()\n\t\tlinks = response.xpath(\"//div[@class='contents dropcap']//a/text()\").getall()\n\t\talbumLinks = response.xpath(\"//div[@class='contents dropcap']//a[contains(@href,'reviews')]//text()\").getall()\n\t\tartistLinks = response.xpath(\"//div[@class='contents dropcap']//a[contains(@href,'artists')]//text()\").getall()\n\n\t\titem['album'] = album\n\t\titem['artist'] =  artist\n\t\titem['year'] = year\n\t\titem['score'] = score\n\t\titem['genre'] = genre\n\t\titem['reviewer'] = reviewer\n\t\titem['text'] = text\n\t\titem['italic'] = italic\n\t\titem['links'] = links\n\t\titem['albumLinks'] = albumLinks\n\t\titem['artistLinks'] = artistLinks\n\n\t\tyield item\n```\n几点说明：\n1. 这里的`contains`函数的意思是说：寻找一切包含`reviews`或`artists`子串的网址(`@href`)，然后在找到这些网址的**链接文字**(`text()`)，而不是网址本身。\n\n1. `getall()`和`get()`的区别在于：getall以list形式给你一切符合xpath要求的东西；即使只有一个，它也会给你一个list。而get只返回第一个符合xpath要求的东西。之所以artist用getall是因为有时候[多个歌手/乐队会同时合作一张专辑](https://pitchfork.com/reviews/albums/15725-watch-the-throne/)。 翻到本文最后成品那张图片，会发现每个artist都是以list的形式（即被`[]`包围的形式）呈现的。\n\n\n1. 这里的`start_urls`没有了，取而代之的是：\n\n```python\ndef start_requests(self):\n\turl = 'https://pitchfork.com'\n\t###!!!!!!!! CHANGE DIRECTORY !!!!!!!!###\n\tpath = Path('C:\\\\Users\\\\drillthewall\\\\Desktop\\\\tuningfork\\\\pitchfork_scraper\\\\pitchfork_scraper\\\\spiders\\\\eightPlusLinks.json')\n\twith path.open() as json_file:\n\t\tdata = json.load(json_file)\n\t\tfor review in data:\n\t\t\tappendurl = review['url']\n\t\t\ts = url + appendurl\n\t\t\tyield scrapy.Request(s,self.parse)\n```\n\n`start_urls`和`start_requests`都是Scrapy built-in的功能，具体如何使用请参考[关于这个的Scrapy Documentation](http://docs.scrapy.org/en/latest/topics/spiders.html)\n\n1. 有一个很简单的只摘文字的方法：利用一个Python Package叫\"html text\"\n\n```bash\npip install html-text\n```\n我们可以使用一个extract_text()函数来搞定文段里的什么奇怪的字母啊，超链接啊，斜体字粗体字一类的。于是就有这样的骚操作：\n\n```python\ntext = \"\"\nfor paragraph in response.xpath(\"//div[@class='contents dropcap']/p\"):\n\thtml = paragraph.get()\n\ttext = text + \" \" + extract_text(html)\n```\n\n1. 这个items具体如何工作我也不知道，反正[我看的Documentation](https://docs.scrapy.org/en/latest/topics/items.html)他让我在Scrapy自动生成的items.py里写：\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://docs.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\nclass PitchforkScraperItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    album = scrapy.Field()\n    artist = scrapy.Field()\n    year = scrapy.Field()\n    score = scrapy.Field()\n    genre = scrapy.Field()\n    reviewer = scrapy.Field()\n    text = scrapy.Field()\n    italic = scrapy.Field()\n    links = scrapy.Field()\n    artistLinks = scrapy.Field()\n    albumLinks = scrapy.Field()\n```\n应该就是一个把摘录的一切信息封装起来的一个好习惯，没什么特别的。\n\n## 大功告成\n\n![done](/img/13.png)\n\n至于拿到这堆信息之后怎么分析，能玩出什么花样，我们下期再见啦！\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["FEATURED","tuningfork","中文","scrapy","python","web scraping","tutorials"]},{"title":"tuningfork - Fun with data from Pitchfork - Pt. 0 - Preface","url":"/2019/10/06/tuningfork-pt-0/","content":"### Preface\n\nFor those of you who know me personally, you probably know that I'm a huge music nerd. Now, no matter if you're a music fanatic or not, \"discovering new music\" is something that you must have come across. For some, discovering new music is like a ritual in which you spend the entire Sunday afternoon: You drive to the local record store, talk with the owner who became a friend of yours because you come here so often, and he just *knows* your taste in music. He walks you to a shelf full of records, browses through the vinyl collection while mumbling \"where is it...\", and finally hands you a record that you have never seen before but you know you're gonna fell in love with it just by looking at the album cover. For some, discovering new music is not a task at all: you heard \"Senorita\" playing in a boba shop so you started to listen to it, and then thought Shawn Mendes was a good singer just because he looks handsome, and you play a total of 7 Shawn Mendes songs on repeat, before going to listen to Charlie Puth thanks to the \"Related Artists\" feature in the music app on your phone. \n\nAs a Generation-Z born and raised in Beijing who doesn't have a vinyl player, I never got the privilege to experience the former version, and I don't think I'm the type that fits in the latter stereotype as well. Of all the myriad of music discovery methods available via the internet, the one I use the most is a music journalism website named **[Pitchfork](https://pitchfork.com/)**. Why? Because:\n\n- Their taste is more leaned on alternative music in general.\n- The \"Best New Music\" feature keeps me updated on the best current releases.\n- They upload lists once in a while so it's always fun to get a bunch of recommendations at once.\n- Their website interface (used to be) clean (and still is relatively cleaner than the other sites albeit the ads on the site currently).\n- ......and last but not least, **I don't know a single publication that writes better album reviews and features (from a literary perspective) than Pitchfork**.\n\nTo make my point clear, [here's a review they wrote](https://pitchfork.com/reviews/albums/avril-lavigne-let-go/) on, not an indie band, not an experimental artist, but none other than Avril Lavigne's debut album *Let Go*. If we could just ignore the lukewarm score they gave, the entire review is full of passion but still objective, in some miraculous way. I myself used to listen to Avril when I was still in elementary school, so I never formed my thoughts the way they did in the review. Reading this review is... interestingly unbelievable. They used the word \"pugnacious\" to describe a song edgy-ly named \"Sk8er Boi\". That itself is enough to make my point.  \n\nAfter witnessing pitchfork publish some [questionable reviews](https://pitchfork.com/reviews/albums/taylor-swift-red/), Pitchfork only appears more curious to me. I wanted to extract all the interesting data from the site and analyze and play around the data that I've mined. What makes Pitchfork the tastemaker in Indie music? What are some words that they like to use? Can we write a program to let it write some random sentence Pitchfork-style? \n\nLet's see if we can answer all these questions and many more in this journey of ours.\n\n### Finished Posts\n- [Mining data from every 8.0+ Pitchfork reviews (Python web scraping tutorial)](https://jigsawfallingintoplace.github.io/2019/10/12/tuningfork-pt-1/)\n\n### Upcoming Posts\n- Determining what are some of Pitchfork's favorite words (with tutorial)\n- Using Markov Chain & n-grams to generate Pitchfork-esque sentences & paragraphs. (with explanation)\n- ...And more!\n\n\n\n\n\n\n\n\n\n","tags":["FEATURED","English","tuningfork","misc"]}]