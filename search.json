[{"title":"tuningfork - Pt. 1 - 用Scrapy爬虫得到Pitchfork一切8.0+乐评（Python网页爬虫教程）","url":"/2019/10/12/tuningfork-pt-1/","content":"\n[**目录**](https://jigsawfallingintoplace.github.io/2019/10/06/tuningfork-pt-0/)\n\n目前比较流行的Python爬虫package有两个，一个是[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)，另一个是[Scrapy](https://scrapy.org/)。但是[据说](https://hexfox.com/p/scrapy-vs-beautifulsoup/)Scrapy更方便，更强大，速度更快。本教程将使用Scrapy。\n\n关于如何使用Scrapy，[Scrapy的官方教程](http://docs.scrapy.org/en/latest/index.html)必然讲得比我好。随便百度一下谷歌一下\"Scrapy教程\"应该也讲得比我好hhhh。\n\n### 安装\n\n此处略，直接（在git bash）命令行里输入\n\n```bash\npip install Scrapy\n```\n\n如果你没有Python，那就先搜索一下怎么下载Python，在此不再赘述。\n\n[官方安装教程](http://docs.scrapy.org/en/latest/intro/install.html)\n\n### 介绍\n\n开始正题。希望本教程能够越简洁明了越好。\n\n爬虫总体来说有两个功能：\n1. **Parse 解析** 白话：对于每一篇爬虫会遇到的网页，你得告诉爬虫去摘录哪些部分中的信息。\n2. **Follow Links 跟随链接** 白话： 爬虫每爬完一篇网页，你得告诉它接下来去哪个网址爬信息。不然总不能你一个一个输入网址吧hhhh\n\n一般来说，这两个功能可以放在一个爬虫里，即：这个爬虫先开始爬这个网页，摘完了你要的信息，同时也找到了它接下来要爬的网页（一般来说都是一个类似“next page”或者“previous page”一类的按钮），跟随那个链接（比如说\"next page\")，继续摘你要的信息，直到没有“next page”这样的按钮。\n\n跟随哪个链接都是随意的，不一定非得是next page。比如说你可搞一个百度百科的爬虫，每爬完一篇直接跟随这个词条中任何其他百度百科词条的超链接，以此类推，然后你就能爬出来很多很多百度百科词条。\n\n我怀揣着希望，兴冲冲地想让这么一个爬虫把所有我想要Pitchfork的乐评都爬出来，结果我发现————\n\n***他们并没有这个任何类似\"next review\",\"next page\"这样的按钮***\n\nPitchfork作为高逼格网站，用了ajax的[infinite scroll](https://scrollmagic.io/examples/advanced/infinite_scrolling.html)功能，即，你只要看到这篇乐评的差不多四分之三，网页自动把下一篇乐评无缝衔接在这篇乐评之后。这会造成什么后果呢，爬虫每摘录完一个网页里的信息，它就在脑海里[叹息一声\"Where do we go from here\"](https://music.163.com/#/song?id=18795418)，然后收工了——因为我并不能告诉它接下来去parse哪个网址。\n\n在我不知所措了三天之后，我想到了办法！！！\n\nPitchfork有[一个网页全部是他们曾给分数不低于8.0分的乐评的链接](https://pitchfork.com/best/high-scoring-albums/)，虽然这个网页也是infinite scroll，但是我们发现再往下浏览的时候，每个网址是标号的。\n\n```html\nhttps://pitchfork.com/best/high-scoring-albums/?page=1\nhttps://pitchfork.com/best/high-scoring-albums/?page=2\nhttps://pitchfork.com/best/high-scoring-albums/?page=3\nhttps://pitchfork.com/best/high-scoring-albums/?page=4\n```\n\n如果网址有规律可循，那就（相对）简单了。\n\n总体思路：\n\n1. 先让爬虫一号得到一切8.0+乐评的网址，存起来。\n2. 再让另一个爬虫跟随这个文件里的网址，分别得到我想要的信息。\n\n直接上代码。\n\n### 爬虫#1\n\n先建立一个爬虫：在命令行中cd到你想要建爬虫的文件夹，然后输入\n\n```bash\nscrapy startproject p4kLinkScraper\n```\n\n在`p4kLinkScraper/spiders`文件夹里建立一个link_scraper.py，把这些输入进去。\n\n\n```python\nimport scrapy\n\nURL = 'https://pitchfork.com/best/high-scoring-albums/?page=%d'\n\nclass linkScraper (scrapy.Spider):\n\tname = \"linkScraper\"\n\t\n\tstart_urls = [URL % 1]\n\n\tdef __init__(self):\n\t\tself.page_number = 1\n\n\tdef parse(self, response):\n\n\t\tif self.page_number >= 386:\n\t\t\traise CloseSpider('no more pages')\n\n\t\tfor review in response.xpath('//div[@class=\"review\"]'):\n\t\t\tyield {\n\t\t\t\t'url' : review.xpath('.//a/@href').get(),\n\t\t\t\t'artist' : review.xpath('.//ul/li/text()').get(),\n\t\t\t\t'album' : review.xpath('.//h2/text()').get()\n\t\t\t}\n\n\t\tself.page_number += 1\n\t\tnewurl = URL % self.page_number\n\t\tyield scrapy.Request(url=newurl, callback=self.parse)\n```\n\n白话：一开始先让它爬https://pitchfork.com/best/high-scoring-albums/?page=1 这篇，parse完了之后，直接把page_number加一，继续爬。\n\n那么在网页里怎么parse呢？先找到HTML中一切css class为“review”的div，然后在这些里面找到相应的网址以及其他信息。在网页里怎么找可以用Chrome的Inspect mode(ctrl shift i)可以找到\n\n![image1](/img/11.png)\n\n让Scrapy爬虫“找到”你想要的信息的方法有两种，第一种是css selectors，第二种是xpath。这里我们用xpath。以上图为例，如果我们想找到本文标题，我们可以直接\n```python\nxpath('//div[@class=\"review\"]')\n```\n这里双斜线（//）是**任何子孙**的意思，单斜线（/）则是严格的这一个节点的孩子。\n仍然以刚才那个图片为例子。我想要找到标题可以\n```python\nxpath('//div[@class=\"post_container\"]/div[@class=\"review\"]')\n或者\nxpath('//div[@class=\"index_container\"]//div[@class=\"review\"]')\n```\n但是不可以\n```\nxpath('//div[@class=\"index_container\"]/div[@class=\"review\"]')\n```\n\n在命令行里cd到project文件夹，让爬虫开始爬，并把结果输入到一个json文件里：\n```\nscrapy crawl quotes -o eightPlusLinks.json\n```\n\n然后我们就有了一大长串8.0+分乐评的链接啦！\n![Honestly I don't like Bon Iver's new album that much](/img/12.png)\n\n### 爬虫#2\n\n之后我们就可以再建立一个爬虫，跟随刚才爬出来的一切8.0+乐评的网址。具体内容参见[我的GitHub](https://github.com/jigsawfallingintoplace/tuningfork/tree/master/pitchfork_scraper)\n\n```python\nimport scrapy\nfrom ..items import PitchforkScraperItem\nfrom pathlib import Path\nimport json\nfrom html_text import extract_text\n# import BNMlinks.json\n\nclass PitchforkSpider (scrapy.Spider):\n\tname = \"pitchfork_spider\"\n\t# start_urls = ['https://pitchfork.com/reviews/albums/the-carters-everything-is-love/']\n\n\tdef start_requests(self):\n\t\turl = 'https://pitchfork.com'\n\t\t###!!!!!!!! CHANGE DIRECTORY !!!!!!!!###\n\t\tpath = Path('C:\\\\Users\\\\drillthewall\\\\Desktop\\\\tuningfork\\\\pitchfork_scraper\\\\pitchfork_scraper\\\\spiders\\\\eightPlusLinks.json')\n\t\twith path.open() as json_file:\n\t\t\tdata = json.load(json_file)\n\t\t\tfor review in data:\n\t\t\t\tappendurl = review['url']\n\t\t\t\ts = url + appendurl\n\t\t\t\tyield scrapy.Request(s,self.parse)\n\n\n\tdef parse(self, response):\n\n\t\titem = PitchforkScraperItem()\n\n\t\talbum = response.xpath(\"//h1[@class='single-album-tombstone__review-title']/text()\").get()\n\n\t\tartist = response.xpath('//ul[@class=\"artist-links artist-list single-album-tombstone__artist-links\"]/li/a/text()').getall()\t\t\n\n\t\tyear = response.xpath('//span[@class=\"single-album-tombstone__meta-year\"]').get()\n\t\tyear = extract_text(year)\n\t\tyear = year[2:]\n\n\t\tgenre = response.xpath('//a[@class=\"genre-list__link\"]/text()').getall()\n\n\t\treviewer = response.xpath('//a[@class=\"authors-detail__display-name\"]/text()').get()\n\n\t\tscore = response.xpath(\"//span[@class='score']/text()\").get()\n\n\t\ttext = \"\"\n\t\tfor paragraph in response.xpath(\"//div[@class='contents dropcap']/p\"):\n\t\t\thtml = paragraph.get()\n\t\t\ttext = text + \" \" + extract_text(html)\n\n\t\titalic = response.xpath(\"//em/text()\").getall()\n\n\t\tlinks = response.xpath(\"//div[@class='contents dropcap']//a/text()\").getall()\n\n\t\talbumLinks = response.xpath(\"//div[@class='contents dropcap']//a[contains(@href,'reviews')]//text()\").getall()\n\n\t\tartistLinks = response.xpath(\"//div[@class='contents dropcap']//a[contains(@href,'artists')]//text()\").getall()\n\t\titem['album'] = album\n\t\titem['artist'] =  artist\n\t\titem['year'] = year\n\t\titem['score'] = score\n\t\titem['genre'] = genre\n\t\titem['reviewer'] = reviewer\n\t\titem['text'] = text\n\t\titem['italic'] = italic\n\t\titem['links'] = links\n\t\titem['albumLinks'] = albumLinks\n\t\titem['artistLinks'] = artistLinks\n\n\t\tyield item\n```\n\n几点说明：\n\n1.这里的`start_urls`没有了，取而代之的是：\n\n```python\ndef start_requests(self):\n\turl = 'https://pitchfork.com'\n\t###!!!!!!!! CHANGE DIRECTORY !!!!!!!!###\n\tpath = Path('C:\\\\Users\\\\drillthewall\\\\Desktop\\\\tuningfork\\\\pitchfork_scraper\\\\pitchfork_scraper\\\\spiders\\\\eightPlusLinks.json')\n\twith path.open() as json_file:\n\t\tdata = json.load(json_file)\n\t\tfor review in data:\n\t\t\tappendurl = review['url']\n\t\t\ts = url + appendurl\n\t\t\tyield scrapy.Request(s,self.parse)\n```\n\n`start_urls`和`start_requests`都是Scrapy built-in的功能，具体如何使用请参考[关于这个的Scrapy Documentation](http://docs.scrapy.org/en/latest/topics/spiders.html)\n\n2. 有一个很简单的只摘文字的方法：利用一个Python Package叫\"html text\"\n```\npip install html-text\n```\n然后无论文段里有什么奇怪的字母啊，超链接啊，斜体字粗体字一类的，这个都可以忽视。于是就有这样的骚操作：\n\n```python\ntext = \"\"\nfor paragraph in response.xpath(\"//div[@class='contents dropcap']/p\"):\n\thtml = paragraph.get()\n\ttext = text + \" \" + extract_text(html)\n```\n\n3. 这个items具体如何工作我也不知道，反正我看的Documentation他让我在自动生成的items.py里写：\n```python\n# -*- coding: utf-8 -*-\n\n# Define here the models for your scraped items\n#\n# See documentation in:\n# https://docs.scrapy.org/en/latest/topics/items.html\n\nimport scrapy\n\nclass PitchforkScraperItem(scrapy.Item):\n    # define the fields for your item here like:\n    # name = scrapy.Field()\n    album = scrapy.Field()\n    artist = scrapy.Field()\n    year = scrapy.Field()\n    score = scrapy.Field()\n    genre = scrapy.Field()\n    reviewer = scrapy.Field()\n    text = scrapy.Field()\n    italic = scrapy.Field()\n    links = scrapy.Field()\n    artistLinks = scrapy.Field()\n    albumLinks = scrapy.Field()\n```\n应该就是一个把摘录的一切信息封装起来的一个好习惯，没什么特别的。\n\n### 大功告成\n\n![done](/img/13.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["FEATURED","tuningfork","中文","scrapy","python","web scraping","tutorials"]},{"title":"tuningfork - Fun with data from Pitchfork - Pt. 0 - Preface","url":"/2019/10/06/tuningfork-pt-0/","content":"### Preface\n\nFor those of you who know me personally, you probably know that I'm a huge music nerd. Now, no matter if you're a music fanatic or not, \"discovering new music\" is something that you must have come across. For some, discovering new music is like a ritual in which you spend the entire Sunday afternoon: You drive to the local record store, talk with the owner who became a friend of yours because you come here so often, and he just *knows* your taste in music. He walks you to a shelf full of records, browses through the vinyl collection while mumbling \"where is it...\", and finally hands you a record that you have never seen before but you know you're gonna fell in love with it just by looking at the album cover. For some, discovering new music is not a task at all: you heard \"Senorita\" playing in a boba shop so you started to listen to it, and then thought Shawn Mendes was a good singer just because he looks handsome, and you play a total of 7 Shawn Mendes songs on repeat, before going to listen to Charlie Puth thanks to the \"Related Artists\" feature in the music app on your phone. \n\nAs a Generation-Z born and raised in Beijing who doesn't have a vinyl player, I never got the privilege to experience the former version, and I don't think I'm the type that fits in the latter stereotype as well. Of all the myriad of music discovery methods available via the internet, the one I use the most is a music journalism website named **[Pitchfork](https://pitchfork.com/)**. Why? Because:\n\n- Their taste is more leaned on alternative music in general.\n- The \"Best New Music\" feature keeps me updated on the best current releases.\n- They upload lists once in a while so it's always fun to get a bunch of recommendations at once.\n- Their website interface (used to be) clean (and still is relatively cleaner than the other sites albeit the ads on the site currently).\n- ......and last but not least, **I don't know a single publication that writes better album reviews and features (from a literary perspective) than Pitchfork**.\n\nTo make my point clear, [here's a review they wrote](https://pitchfork.com/reviews/albums/avril-lavigne-let-go/) on, not an indie band, not an experimental artist, but none other than Avril Lavigne's debut album *Let Go*. If we could just ignore the lukewarm score they gave, the entire review is full of passion but still objective, in some miraculous way. I myself used to listen to Avril when I was still in elementary school, so I never formed my thoughts the way they did in the review. Reading this review is... interestingly unbelievable. They used the word \"pugnacious\" to describe a song edgy-ly named \"Sk8er Boi\". That itself is enough to make my point.  \n\nAfter witnessing pitchfork publish some [questionable reviews](https://pitchfork.com/reviews/albums/taylor-swift-red/), Pitchfork only appears more curious to me. I wanted to extract all the interesting data from the site and analyze and play around the data that I've mined. What makes Pitchfork the tastemaker in Indie music? What are some words that they like to use? Can we write a program to let it write some random sentence Pitchfork-style? \n\nLet's see if we can answer all these questions and many more in this journey of ours.\n\n### Finished Posts\n- Mining data from every 8.0+ Pitchfork reviews (Python web scraping tutorial)\n\n### Upcoming posts\n- Determining what are some of Pitchfork's favorite words (with tutorial)\n- Using Markov Chain & n-grams to generate Pitchfork-esque sentences & paragraphs. (with explanation)\n- ...And more!\n\n\n\n\n\n\n\n\n\n","tags":["FEATURED","English","tuningfork","misc"]}]